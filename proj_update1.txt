github repo link: https://github.com/tkherman/Texas-Hold-em-Game

time log link: https://docs.google.com/a/nd.edu/spreadsheets/d/16s7f6LoJHC_Yt0TQVFLJ6ljKgcLSHl2QfEsClUYjv2o/edit?usp=sharing

lab 6 report.txt:


John:

Herman wrote the majority of the CardDeck class, but I added some functions
and we discussed the class in terms of the overall structure of our program
before he began.  Essentially, the class stores a vector of "Cards",
which are represented by a struct containing an int for the value and a char
for the suit.  The constructor makes this a full deck of 52 cards (containing
every possible card and no duplicates).  The deck is shuffled using the
Fisher-Yates shuffling algorithm.  One important function (implemented by 
Herman) which will be very helpful when we later implement dealing in the 
Poker game is getCard, which removes the last element from the card vector 
(which represents the top of the deck), and returns it.  My main contribution
to the CardDeck class was adding a display function to the Card struct.
This function uses a switch statement to convert the char representing the
suit to a more legible string (e.g. 'h' becomes "Hearts") and an if else 
block to convert the card values to strings (e.g. 1 to "Ace", 5 to "5", and 12
to "Queen").  I attempted to overload the << operator instead of making a
display function, but this proved much more difficult than I thought, so I
decided it wasn't worth the waste of time.  The header I wrote for the Game
class is very primitive and will likely change significantly.

The most significant things I learned this week deal with possible approaches
to calculating odds and maintaining our github repository.  Without thinking
much about it, calculating the odds for a single player to win a hand at a
given point in Texas Hold'em does not sound terribly difficult.  However, with
over 2.5 million possible poker hands, actually enumerating all possible hand
combinations for each player and determining the number of hands that will
win is extraordinarily expensive computationally.  A much better approach is 
applying a Monte Carlo approximation, which essentially means simulating a
bunch of random possibilities for the rest of the hand and determining odds
from those results.  This will not produce absolutely accurate odds, but
with enough simulations, the odds we generate will be exceedingly close to
what we would get from a complete enumeration.  My other significant area
of research this week had to do with using git with a partner.  From systems
programming, I know how to stage, commit, and push code from a local master
branch to the online master branch, but I didn't know how to create different
branches so that Herman and I can work on different pieces at the same time.
Using git checkout, I can create a new branch with the intent of working on
a specific area of code without altering the master branch until I am sure it
is fully working.  When I am satisfied with my changes, I can merge my new
branch back to master using git merge (though merge conflicts must be patched
before this will actually take place).

Herman:

So far, what we've discovered is that it would be difficult to straight out do
the probablistic calculation behind every hand and that it is a much better
approach to use the Monte Carlo method. This would mean that the outcome would
be a estimation but research we did showed that the outcome would still be
fairly accurate. John is in charge of doing further research on how to
implement this. In my research, I discovered that it may be useful to
precalculate the ranking of all possible 5 card hands. It would only take up
about 10mb of space because there are only 52C5 possible hands which is not too
large of a number. My next step would be to figure out how to store the all the
precalculated rankings in a data structure that would allow the fastest access
and how to load the precalculated rankings into our program each time the
program starts.

In terms of coding, John and I will be trying to code a functional poker game
as soon as possible so that we can get started on the odd
calculation/estimation.


_____________________________________
Post-Lab 6 Update:
Since lab 6 was completed, we finished building the overall shell of our 
program.  As of now, we can run a "poker game" from the command line that
allows users to see their cards and fold or stay in on the proper occasions
(after the deal, after the flop, after the turn, and after the river).  We have 
also been focusing on different algorithms for comparing 5 card poker hands. 
Some of the approaches we found online are impressively efficient but 
exceedingly complicated.  In our research, we found a text file from an open 
source github repo that ranks every "equivalence class" of hands (that is, 
groups of 5 card poker hands that are equal in value).  By using the std::sort
algorithm to sort each string in the text file, we were able to create an STL
map that takes in a hand (represented by a 5 character string like "369JA") as
its key and has the rank of the card as its value.  We plan on using these 
values to compare cards.

_____________________________________
April 18 Update:

We have made significant progress since the previous update three weeks ago.
Our first major advancement was figuring out how to compare the rankings of
poker hands.  To do so, we expanded on our strategy of using the equivalence
class text file.  However, instead of sorting strings, we instead used 
multiplication by the first thirteen prime numbers for each card value in a hand
since this is gauranteed to produce a different result for each equivalence 
class of hands (excluding flushes).  The result of this prime multiplication
is used as the key in an STL unordered_map with the correct equivalence class 
ranking as the corresponding value.  To deal with flushes, we keep separate
maps for flushes and others and look through all 5 cards in a hand to see if
the suits all match (a flush) in order to know which map to look in to get the
ranking.  Since in Texas Hold-em, each player has 2 cards with 5 community cards
out, each player has 21 possible hands.  To determine the best of these 21, we
iteratively look through each of the 21 hands and store the best ranking as
the player's score.  In the overall gameplay, the result of the function that
determine's a plater's best hand used to determine the winner of a round of
poker.
The next significant advancement we have made is to the ability to accurately
and efficiently calculate the odds that a specific player will win a hand
at any point in the hand (obviously assuming that this player does not know
every hand out on the board).  Since a complete enumeration of all possible 
round outcomes is not realistic (and extremely computationally intensive) given 
the massive number of possible outcomes, we opted to perform a Monte Carlo
simulation by randomizing the unknown cards (community cards not played yet and
cards of players still in) and determining if the player wins over and over.
With enough simulations, we calculate a very accurate approximation of the
statistical odds of winning.
At this point, we are unsure of where to go next, so we definitely need to meet
with Prof. Scott since he is at least vaguely familiar with our project and
progress.  We are hopefully close to implementing betting and having a fully
functional command line tool, but this is clearly not enough for a a final
project in this class.  However, we have both spent over 18 hours on the project,
so we need to find somewhere to go that will not require us to spend a 
ridiculous amount of additional time in the next two weeks.
